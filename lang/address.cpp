#include "address.h"

TLANG_NAMESPACE_BEGIN

template <int n_, typename child_type>
struct fixed {
  static constexpr int n = n_;
  child_type children[n];
  TC_FORCE_INLINE child_type &look_up(int i) {  // i is flattened index
    return children[i];
  }
};

template <typename ...child_types>
struct group {
  using child_type_tuple = std::tuple<child_types...>;
  child_type_tuple children;

  template <int i>
  TC_FORCE_INLINE auto &get() {
    return std::get<i>(children);
  }
};

// this should be generated by the compiler
using placeholder_u = real;
using placeholder_v = real;
using node1 = group<placeholder_u , placeholder_v >;
using root = fixed<32, node1>;

root r;

real &look_up_u(root &r, int i) {
  auto &n1 = r.look_up(i);
  auto &n2 = n1.get<1>();
  return n2;
}

TLANG_NAMESPACE_END
